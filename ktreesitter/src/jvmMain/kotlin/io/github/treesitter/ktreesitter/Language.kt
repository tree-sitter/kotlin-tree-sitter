package io.github.treesitter.ktreesitter

/**
 * A class that defines how to parse a particular language.
 *
 * When a [Language] is generated by the Tree-sitter CLI, it is assigned an
 * [ABI version][abiVersion] number that corresponds to the current CLI version.
 *
 * @constructor Create a new instance from the given language pointer.
 * @param language A pointer to a `TSLanguage` cast to [Long].
 * @throws [IllegalArgumentException]
 *  If the pointer is invalid or the [version][abiVersion] is incompatible.
 */
actual class Language @Throws(IllegalArgumentException::class) actual constructor(language: Any) {
    @JvmField
    internal val self: Long = (language as? Long)?.takeIf { it > 0L }
        ?: throw IllegalArgumentException("Invalid language: $language")

    init {
        checkVersion()
    }

    /**
     * The ABI version number for this language.
     *
     * @since 0.25.0
     */
    @get:JvmName("getAbiVersion")
    actual val abiVersion: UInt
        external get

    /** The ABI version number for this language. */
    @Deprecated("version is deprecated", ReplaceWith("abiVersion"), DeprecationLevel.ERROR)
    @get:JvmName("getVersion")
    actual val version: UInt
        external get

    /** The number of distinct node types in this language. */
    @get:JvmName("getSymbolCount")
    actual val symbolCount: UInt
        external get

    /** The number of valid states in this language. */
    @get:JvmName("getStateCount")
    actual val stateCount: UInt
        external get

    /** The number of distinct field names in this language. */
    @get:JvmName("getFieldCount")
    actual val fieldCount: UInt
        external get

    /**
     * The name of the language, if available.
     *
     * @since 0.25.0
     */
    actual val name: String?
        external get

    /**
     * The metadata of the language, if available.
     *
     * @since 0.25.0
     */
    actual val metadata: Metadata?
        external get

    /**
     * The supertype symbols of the language.
     *
     * @since 0.25.0
     */
    @OptIn(ExperimentalUnsignedTypes::class)
    @get:JvmName("getSupertypes")
    actual val supertypes: UShortArray
        external get

    /**
     * Get another reference to the language.
     *
     * @since 0.24.0
     */
    actual fun copy() = Language(copy(self))

    /** Get the node type for the given numerical ID. */
    @JvmName("symbolName")
    actual external fun symbolName(symbol: UShort): String?

    /** Get the numerical ID for the given node type. */
    @JvmName("symbolForName")
    actual external fun symbolForName(name: String, isNamed: Boolean): UShort

    /**
     * Get the subtype symbols for the given supertype symbol
     *
     * @since 0.25.0
     * @see supertypes
     */
    @JvmName("subtypes")
    @OptIn(ExperimentalUnsignedTypes::class)
    actual external fun subtypes(supertype: UShort): UShortArray

    /**
     * Check if the node for the given numerical ID is named
     *
     * @see [Node.isNamed]
     */
    @JvmName("isNamed")
    actual external fun isNamed(symbol: UShort): Boolean

    /** Check if the node for the given numerical ID is visible. */
    @JvmName("isVisible")
    actual external fun isVisible(symbol: UShort): Boolean

    /**
     * Check if the node for the given numerical ID is a supertype.
     *
     * @since 0.24.0
     */
    @JvmName("isSupertype")
    actual external fun isSupertype(symbol: UShort): Boolean

    /** Get the field name for the given numerical id. */
    @JvmName("fieldNameForId")
    actual external fun fieldNameForId(id: UShort): String?

    /** Get the numerical ID for the given field name. */
    @JvmName("fieldIdForName")
    actual external fun fieldIdForName(name: String): UShort

    /**
     * Get the next parse state.
     *
     * Combine this with [lookaheadIterator] to generate
     * completion suggestions or valid symbols in error nodes.
     *
     * #### Example
     *
     * ```kotlin
     * language.nextState(node.parseState, node.grammarSymbol)
     * ```
     */
    @JvmName("nextState")
    actual external fun nextState(state: UShort, symbol: UShort): UShort

    /**
     * Create a new [lookahead iterator][LookaheadIterator] for the given parse state.
     *
     * @throws [IllegalArgumentException] If the state is invalid for this language.
     */
    @JvmName("lookaheadIterator")
    @Throws(IllegalArgumentException::class)
    actual fun lookaheadIterator(state: UShort) = LookaheadIterator(this, state)

    /**
     * Create a new [Query] from a string containing one or more S-expression
     * [patterns](https://tree-sitter.github.io/tree-sitter/using-parsers/queries/1-syntax.html).
     *
     * @throws [QueryError] If any error occurred while creating the query.
     */
    @Throws(QueryError::class)
    @Deprecated("Use the Query constructor instead")
    actual fun query(source: String) = Query(this, source)

    actual override fun equals(other: Any?) =
        this === other || (other is Language && self == other.self)

    actual override fun hashCode() = self.hashCode()

    override fun toString() = "Language(id=0x${self.toString(16)}, abiVersion=$abiVersion)"

    @Throws(IllegalArgumentException::class)
    private external fun checkVersion()

    /**
     * A class containing the [Language] metadata.
     *
     * @property semanticVersion The [Semantic Version](https://semver.org/) of the [Language].
     */
    @ConsistentCopyVisibility
    actual data class Metadata internal actual constructor(
        @get:JvmName("getSemanticVersion")
        actual val semanticVersion: Triple<UShort, UShort, UShort>
    ) {
        actual override fun toString() = buildString {
            append("Metadata(semanticVersion=\"")
            append(semanticVersion.first)
            append('.')
            append(semanticVersion.second)
            append('.')
            append(semanticVersion.third)
            append("\")")
        }
    }

    private companion object {
        @JvmStatic
        private external fun copy(self: Long): Long

        init {
            NativeUtils.loadLibrary()
        }
    }
}
